// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// try_rcpp
int try_rcpp(int x);
RcppExport SEXP _GDFMM_try_rcpp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(try_rcpp(x));
    return rcpp_result_gen;
END_RCPP
}
// example_GDFMM_sampler_c
Rcpp::List example_GDFMM_sampler_c(Eigen::MatrixXd const& data, Rcpp::String P0_prior_name);
RcppExport SEXP _GDFMM_example_GDFMM_sampler_c(SEXP dataSEXP, SEXP P0_prior_nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd const& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type P0_prior_name(P0_prior_nameSEXP);
    rcpp_result_gen = Rcpp::wrap(example_GDFMM_sampler_c(data, P0_prior_name));
    return rcpp_result_gen;
END_RCPP
}
// lgfactorial
arma::vec lgfactorial(int n, double sigma);
RcppExport SEXP _GDFMM_lgfactorial(SEXP nSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(lgfactorial(n, sigma));
    return rcpp_result_gen;
END_RCPP
}
// lgfactorials
arma::mat lgfactorials(int n, double sigma);
RcppExport SEXP _GDFMM_lgfactorials(SEXP nSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(lgfactorials(n, sigma));
    return rcpp_result_gen;
END_RCPP
}
// lgfactorial_ns
arma::vec lgfactorial_ns(int n, double sigma);
RcppExport SEXP _GDFMM_lgfactorial_ns(SEXP nSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(lgfactorial_ns(n, sigma));
    return rcpp_result_gen;
END_RCPP
}
// lastirling1
arma::vec lastirling1(int n);
RcppExport SEXP _GDFMM_lastirling1(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(lastirling1(n));
    return rcpp_result_gen;
END_RCPP
}
// lastirlings1
arma::mat lastirlings1(int n);
RcppExport SEXP _GDFMM_lastirlings1(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(lastirlings1(n));
    return rcpp_result_gen;
END_RCPP
}
// EigenTest
void EigenTest();
RcppExport SEXP _GDFMM_EigenTest() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    EigenTest();
    return R_NilValue;
END_RCPP
}
// TestGSL
void TestGSL();
RcppExport SEXP _GDFMM_TestGSL() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    TestGSL();
    return R_NilValue;
END_RCPP
}
// calcola_stirling
Rcpp::NumericVector calcola_stirling(double gamma, int n);
RcppExport SEXP _GDFMM_calcola_stirling(SEXP gammaSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(calcola_stirling(gamma, n));
    return rcpp_result_gen;
END_RCPP
}
// calcola_stirling_ricor
Rcpp::NumericVector calcola_stirling_ricor(double gamma, unsigned int n);
RcppExport SEXP _GDFMM_calcola_stirling_ricor(SEXP gammaSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(calcola_stirling_ricor(gamma, n));
    return rcpp_result_gen;
END_RCPP
}
// calcola_stirling_ricor_abs
Rcpp::NumericVector calcola_stirling_ricor_abs(double gamma, unsigned int n);
RcppExport SEXP _GDFMM_calcola_stirling_ricor_abs(SEXP gammaSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(calcola_stirling_ricor_abs(gamma, n));
    return rcpp_result_gen;
END_RCPP
}
// calcola_stirling_ricor_log
Rcpp::NumericVector calcola_stirling_ricor_log(double gamma, unsigned int n);
RcppExport SEXP _GDFMM_calcola_stirling_ricor_log(SEXP gammaSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(calcola_stirling_ricor_log(gamma, n));
    return rcpp_result_gen;
END_RCPP
}
// calcola_generalized_factorial_ricor_log
Rcpp::NumericVector calcola_generalized_factorial_ricor_log(double gamma, unsigned int n);
RcppExport SEXP _GDFMM_calcola_generalized_factorial_ricor_log(SEXP gammaSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(calcola_generalized_factorial_ricor_log(gamma, n));
    return rcpp_result_gen;
END_RCPP
}
// calcola_generalized_factorial_ricor_log_matrice
Rcpp::NumericMatrix calcola_generalized_factorial_ricor_log_matrice(double gamma, unsigned int n);
RcppExport SEXP _GDFMM_calcola_generalized_factorial_ricor_log_matrice(SEXP gammaSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(calcola_generalized_factorial_ricor_log_matrice(gamma, n));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_GDFMM_try_rcpp", (DL_FUNC) &_GDFMM_try_rcpp, 1},
    {"_GDFMM_example_GDFMM_sampler_c", (DL_FUNC) &_GDFMM_example_GDFMM_sampler_c, 2},
    {"_GDFMM_lgfactorial", (DL_FUNC) &_GDFMM_lgfactorial, 2},
    {"_GDFMM_lgfactorials", (DL_FUNC) &_GDFMM_lgfactorials, 2},
    {"_GDFMM_lgfactorial_ns", (DL_FUNC) &_GDFMM_lgfactorial_ns, 2},
    {"_GDFMM_lastirling1", (DL_FUNC) &_GDFMM_lastirling1, 1},
    {"_GDFMM_lastirlings1", (DL_FUNC) &_GDFMM_lastirlings1, 1},
    {"_GDFMM_EigenTest", (DL_FUNC) &_GDFMM_EigenTest, 0},
    {"_GDFMM_TestGSL", (DL_FUNC) &_GDFMM_TestGSL, 0},
    {"_GDFMM_calcola_stirling", (DL_FUNC) &_GDFMM_calcola_stirling, 2},
    {"_GDFMM_calcola_stirling_ricor", (DL_FUNC) &_GDFMM_calcola_stirling_ricor, 2},
    {"_GDFMM_calcola_stirling_ricor_abs", (DL_FUNC) &_GDFMM_calcola_stirling_ricor_abs, 2},
    {"_GDFMM_calcola_stirling_ricor_log", (DL_FUNC) &_GDFMM_calcola_stirling_ricor_log, 2},
    {"_GDFMM_calcola_generalized_factorial_ricor_log", (DL_FUNC) &_GDFMM_calcola_generalized_factorial_ricor_log, 2},
    {"_GDFMM_calcola_generalized_factorial_ricor_log_matrice", (DL_FUNC) &_GDFMM_calcola_generalized_factorial_ricor_log_matrice, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_GDFMM(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
